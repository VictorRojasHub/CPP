	UE_LOG(LogTemp, Warning, TEXT("BeginPlay() called!")); //using this log to verify the function we are calling
	int myInt{ 45 }; //with braced initialization the variable is garanteed to be initialized
	UE_LOG(LogTemp, Warning, TEXT("int MyInt: %d"), myInt);

	float myFloat{ 3.14159f }; //f is used to not cause error in conversion
	UE_LOG(LogTemp, Warning, TEXT("int MyFloat: %f"), myFloat);

	double myDouble{ 12.55 };
	UE_LOG(LogTemp, Warning, TEXT("int MyDouble: %lf"), myDouble);

	char myChar{ 'J' };
	UE_LOG(LogTemp, Warning, TEXT("char MyChar: %c"), myChar);

	wchar_t WideChar{ L'J' };
	UE_LOG(LogTemp, Warning, TEXT("wide char MyWIDECHAR: %lc"), WideChar);

	bool myBool{ true };
	UE_LOG(LogTemp, Warning, TEXT("bool MyBool: %d"), myBool); //uses %d cause bools are automatically converted to int

	UE_LOG(LogTemp, Warning, TEXT("int: %d, bool: %d, char: %c"), myInt, false, myChar);
	
	FString myString{ TEXT("MY STRING!!!") };

	UE_LOG(LogTemp, Warning, TEXT("FString MyString: %s"), *myString); //it's like a pointer but it isn't a pointer, just overload, oldschool C style string

	UE_LOG(LogTemp, Warning, TEXT("Name of Instance: %s"), *GetName()); //this take the name of the instance, very useful if you have unknow things errors
